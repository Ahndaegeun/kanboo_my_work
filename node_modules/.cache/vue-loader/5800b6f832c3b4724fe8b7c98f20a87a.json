{"remainingRequest":"/Users/andaegeun/Desktop/kanboo_vue_merge/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/andaegeun/Desktop/kanboo_vue_merge/src/components/component/noAccess/home/Terminal.vue?vue&type=style&index=0&id=0bfc99b8&scoped=true&lang=css","dependencies":[{"path":"/Users/andaegeun/Desktop/kanboo_vue_merge/src/components/component/noAccess/home/Terminal.vue","mtime":1639115078933},{"path":"/Users/andaegeun/Desktop/kanboo_vue_merge/node_modules/css-loader/dist/cjs.js","mtime":1639096176571},{"path":"/Users/andaegeun/Desktop/kanboo_vue_merge/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1639096183165},{"path":"/Users/andaegeun/Desktop/kanboo_vue_merge/node_modules/postcss-loader/src/index.js","mtime":1639096180028},{"path":"/Users/andaegeun/Desktop/kanboo_vue_merge/node_modules/cache-loader/dist/cjs.js","mtime":1639096175720},{"path":"/Users/andaegeun/Desktop/kanboo_vue_merge/node_modules/vue-loader-v16/dist/index.js","mtime":1639096183158}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CkBmb250LWZhY2UgewogIGZvbnQtZmFtaWx5OiAiTmVvRHVuZ2dldW5tbyI7CiAgc3JjOiB1cmwoImh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9naC9wcm9qZWN0bm9vbm51L25vb25mb250c18yMDAxQDEuMy9OZW9EdW5nZ2V1bm1vLndvZmYiKQogICAgZm9ybWF0KCJ3b2ZmIik7CiAgZm9udC13ZWlnaHQ6IG5vcm1hbDsKICBmb250LXN0eWxlOiBub3JtYWw7Cn0KCiogewogIGZvbnQtZmFtaWx5OiAiTmVvRHVuZ2dldW5tbyI7CiAgZm9udC1zaXplOiAyMnB4Owp9CgoudGVybWluYWwtY29udGFpbmVyIHsKICBoZWlnaHQ6IGNhbGMoMTAwdmggLSA3MHB4KTsKfQoKLmNvbnNvbGUgewogIGNvbG9yOiAjMDBhYjI2OwogIGhlaWdodDogMTAwJTsKICBwYWRkaW5nOiAyMHB4Owp9CgppbnB1dCB7CiAgd2lkdGg6IDMzJTsKICBvdXRsaW5lOiBub25lOwogIGJvcmRlcjogbm9uZTsKICBjb2xvcjogI2ZmZjsKICBiYWNrZ3JvdW5kOiAjMTYxNjFhOwp9CgoudXNlci10ZXh0IHsKICBjb2xvcjogI2ZmZjsKfQoKLmNvbnNvbGUtdGV4dCB7CiAgY29sb3I6ICMwMGFiMjY7Cn0KCi5jb20gewogIGNvbG9yOiAjMDBhYjI2Owp9CgoudGV4dC1jb2xvci1yZWQgewogIGNvbG9yOiByZWQ7Cn0KLnRleHQtY29sb3Itb3JhbmdlIHsKICBjb2xvcjogZGFya29yYW5nZTsKfQoKLmljb25zIHsKICBtYXJnaW4tdG9wOiA1cHg7CiAgd2lkdGg6IDIwcHg7CiAgdmVydGljYWwtYWxpZ246IHN1YjsKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7Cn0KCi5jb3B5IHsKICBjdXJzb3I6IHBvaW50ZXI7Cn0K"},{"version":3,"sources":["/Users/andaegeun/Desktop/kanboo_vue_merge/src/components/component/noAccess/home/Terminal.vue"],"names":[],"mappings":"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","file":"/Users/andaegeun/Desktop/kanboo_vue_merge/src/components/component/noAccess/home/Terminal.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"terminal-container\" @click=\"focus()\">\n    <div class=\"console\">\n      <div class=\"output-text\" v-for=\"(i, j) in consoleText.length\" :key=\"j\">\n        <span class=\"console-text\">{{ consoleText[i - 1] }}</span>\n        <span class=\"console-text\">{{ modeText[i - 1] }}</span>\n        <span :class=\"classData[i - 1]\" :id=\"`text-${i - 1}`\" class=\"user-text\">\n          {{ enterText[i - 1] }}</span\n        >\n        <span class=\"copy\" v-if=\"printToken && j === tokenPrintIndex\" @click=\"copyToken\"> [copy]</span>\n      </div>\n      <div class=\"userInput\">\n        {{ rootText }}\n        <span style=\"color: white\" v-if=\"inputData.length == 6\"> +82) </span>\n        <input\n          :type=\"inputType\"\n          @keyup.enter=\"enter\"\n          id=\"inputBox\"\n          v-model=\"inputText\"\n          :class=\"{\n            'text-color-red': signReg,\n            'text-color-orange': reservedWord,\n          }\"\n        />\n        <span v-if=\"idCheck\"> ID already registered </span>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapMutations, mapState } from \"vuex\";\nimport signHelp from \"@/assets/signHelp.js\";\n\nexport default {\n  name: \"Terminal\",\n  computed: {\n    ...mapState({\n      loginInfo: (state) => state.sign.loginInfo,\n      signInfo: (state) => state.sign.signInfo,\n      findInfo: (state) => state.sign.signInfo,\n    }),\n  },\n  updated() {\n    // this.copyToken();\n\n    if(this.printToken){\n        this.tokenPrintIndex = this.consoleText.length -1 ; \n    }\n\n  },\n  mounted() {},\n  components: {},\n  data() {\n    return {\n      rootText: `Kanboo bash(base console) > `,\n      modeText: [`(base console) > `],\n      consoleText: [`Kanboo bash`],\n      enterText: [`Choose Menu 1.login 2.sign 3.find 4.clear 5.cd.. 6.cd home`],\n      classData: [`com`],\n      inputType: \"text\",\n      inputData: [],\n      inputText: \"\",\n      signHelp: signHelp.en,\n      idCheck: false,\n      signReg: false,\n      reservedWord: false,\n      printToken: false,\n      tokenText: \"\",\n      tokenPrintIndex: \"\",\n    };\n  },\n  watch: {\n    inputText: [\"regex\", \"isExistId\"],\n  },\n  methods: {\n    ...mapMutations({\n      login: \"sign/login\",\n      sign: \"sign/sign\",\n      find: \"sign/find\",\n    }),\n    isExistId() {\n      let header = null;\n\n      if (\n        this.inputData.length === 1 &&\n        this.inputText.length > 5 &&\n        this.inputData[0] === \"sign\"\n      ) {\n        this.axios\n          .post(`http://localhost:8099/access/idCheck`, header, {\n            params: {\n              memId: `${this.inputText}`,\n            },\n          })\n          .then((data) => {\n            if (data.data) {\n              this.idCheck = true;\n              this.signReg = true;\n            } else {\n              this.idCheck = false;\n              this.signReg = false;\n            }\n          });\n      }\n    },\n    enter() {\n      let data = this.inputText.toLowerCase();\n      let originalData = this.inputText;\n      if (data === \"clear\") {\n        this.consoleText = [`Kanboo bash`];\n        this.classData = [`com`];\n        switch (this.inputData[0]) {\n          case \"login\":\n            this.modeText = [`(${this.inputData[0]} console) > `];\n            if (this.inputData.length == 1) {\n              this.enterText = [`Enter your ID`];\n            } else if (this.inputData.length == 2) {\n              this.enterText = [`Enter your Password`];\n            }\n            this.addLine(`(${this.inputData[0]} console) > `, data, \"\");\n            return;\n          case \"sign\":\n            this.modeText = [`(${this.inputData[0]} console) > `];\n            this.enterText = [`${this.signHelp[this.inputData.length - 1]}`];\n            if (this.inputData.length == 5)\n              this.classData[0] = [`text-color-red`];\n            this.addLine(`(${this.inputData[0]} console) > `, data, \"\");\n            return;\n          case \"find\":\n            this.modeText = [`(${this.inputData[0]} console) > `];\n            this.enterText = [`Enter your Token`];\n            this.addLine(`(${this.inputData[0]} console) > `, data, \"\");\n            return;\n          default:\n            this.modeText = [`(base console) > `];\n            this.enterText = [\n              `Choose Menu 1.login 2.sign 3.find 4.clear 5.cd.. 6.cd home`,\n            ];\n            this.nothing(originalData);\n            return;\n        }\n      }\n\n      if (this.inputData.length > 0) {\n        switch (data) {\n          case \"cd..\":\n          case \"cd ..\":\n            this.goBack(originalData);\n            return;\n          case \"cd home\":\n            this.addLine(`(${this.inputData[0]} console) > `, data, \"\");\n            this.baseMode();\n            return;\n        }\n\n        switch (this.inputData[0]) {\n          case \"login\":\n            this.loginMode(originalData);\n            break;\n          case \"sign\":\n            this.signMode(originalData);\n            break;\n          case \"find\":\n            this.findMode(data, originalData);\n            break;\n        }\n      } else {\n        switch (data) {\n          case \"login\":\n            this.loginMode(data, originalData);\n            break;\n          case \"sign\":\n            this.signMode(data, originalData);\n            break;\n          case \"find\":\n            this.findMode(data, originalData);\n            break;\n          default:\n            this.nothing(originalData);\n            break;\n        }\n      }\n    },\n    baseMode() {\n      this.inputType = \"text\";\n      this.rootText = `Kanboo bash(base console) > `;\n      this.printToken = false;\n      this.signReg = false;\n      this.inputData.length = 0;\n    },\n\n    loginMode(data, originalData) {\n      if (this.inputText == \"\") return;\n\n      switch (this.inputData.length) {\n        case 0:\n          this.rootText = `Kanboo bash(login console) > `;\n          this.inputData.push(data);\n          this.addLine(`(base console) > `, originalData, \"\");\n          this.addLine(`(login console) > `, `Enter your ID`, `com`);\n          return;\n        case 1:\n          // 아이디 입력\n          this.form(data, \"ID\");\n          this.inputData.push(data);\n          this.addLine(`(login console) > `, `Enter your PW`, `com`);\n          this.inputType = \"password\";\n          return;\n        case 2:\n          // 비밀번호 입력\n          this.form(data, \"PW\");\n          this.inputData.push(data);\n          this.loginAccess();\n          return;\n      }\n    },\n\n    signMode(data, originalData) {\n      if (this.signReg) return;\n      switch (this.inputData.length) {\n        case 0: // 아이디 입력 안내문\n          this.rootText = `Kanboo bash(sign console) > `;\n          this.inputData.push(data);\n          this.addLine(`(base console) > `, originalData, \"\");\n          this.addLine(`(sign console) > `, `${this.signHelp[0]}`, `com`);\n          return;\n        case 1:\n          // 아이디 입력, 비밀번호 입력 안내문\n          this.form(data, \"ID\");\n          this.addLine(`(sign console) > `, `${this.signHelp[1]}`, `com`);\n          this.inputData.push(data);\n          this.inputType = \"password\";\n          return;\n        case 2:\n          // 비번 입력 , 비밀번호 체크 안내문\n          this.form(data, \"PW\");\n          this.addLine(`(sign console) > `, `${this.signHelp[2]}`, `com`);\n          this.inputData.push(data);\n          this.inputType = \"password\";\n          return;\n        case 3:\n          // 비번 확인 입력, 닉네임 입력 안내문\n          this.form(data, \"PWCheck\");\n          if (this.inputData[2] !== data) {\n            this.addLine(`(sign console) > `, `${this.signHelp[2]}`, `com`);\n            return;\n          }\n          this.addLine(`(sign console) > `, `${this.signHelp[3]}`, `com`);\n          this.inputData.push(data);\n          this.inputType = \"text\";\n          return;\n        case 4:\n          // 닉네임 입력, 동의 확인\n          this.form(data, \"nickName\");\n          this.inputData.push(data);\n          this.addLine(\n            `(sign console) > `,\n            `${this.signHelp[4]}`,\n            `text-color-red`\n          );\n          this.inputType = \"text\";\n          return;\n        case 5:\n          // 동의 확인 입력, 폰 입력 안내문\n          this.form(data, \"phoneChk\");\n          if (\"Y\" !== data && \"y\" !== data) {\n            this.addLine(\n              `(sign console) > `,\n              `${this.signHelp[4]}`,\n              `text-color-red`\n            );\n            return;\n          }\n          this.inputData.push(data);\n          this.addLine(`(sign console) > `, `${this.signHelp[5]}`, `com`);\n          return;\n        case 6:\n          // 저나번호 입력\n          this.form(data, \"phone\");\n          this.inputData.push(data);\n          this.signAccess();\n          break;\n      }\n    },\n    findMode(data, originalData) {\n      if (this.inputText == \"\") return;\n      switch (this.inputData.length) {\n        case 0:\n          this.rootText = `Kanboo bash(find console) > `;\n          this.addLine(`(base console) > `, originalData, \"\");\n          this.inputData.push(originalData);\n          this.addLine(`(find console) > `, `ID or PW ?`, `com`);\n          return;\n        case 1:\n          this.addLine(`(find console) > `, data, \"\");\n          this.inputData.push(data);\n          this.addLine(`(find console) > `, `Enter your Token`, `com`);\n          return;\n        case 2:\n          this.addLine(`(find console) > `, originalData, \"\");\n          this.inputData.push(data);\n          this.findUserInfo();\n      }\n      return;\n    },\n    form(data, position) {\n      switch (position) {\n        case \"PW\":\n        case \"PWCheck\":\n          this.addLine(\n            `(${this.inputData[0]} console) > `,\n            this.printPW(data),\n            \"\"\n          );\n          break;\n        case \"phone\":\n          data = `+82) ${data}`;\n\n          this.addLine(`(${this.inputData[0]} console) > `, data, \"\");\n          break;\n        default:\n          this.addLine(`(${this.inputData[0]} console) > `, data, \"\");\n          break;\n      }\n    },\n    nothing(data) {\n      // 키워드 아닐때 그냥 추가\n      this.addLine(`(base console) > `, data, \"\");\n    },\n    goBack(data) {\n      // 뒤로 가기\n      this.addLine(`(${this.inputData[0]} console) > `, data, \"\");\n      this.inputData.pop();\n      if (this.inputData.length === 0) {\n        return this.baseMode();\n      } else {\n        switch (this.inputData[0]) {\n          case \"login\":\n            switch (this.inputData.length) {\n              case 1:\n                this.addLine(\n                  `(${this.inputData[0]} console) > `,\n                  `Enter your ID`,\n                  `com`\n                );\n                return;\n              case 2:\n                this.addLine(\n                  `(${this.inputData[0]} console) > `,\n                  `Enter your PW`,\n                  `com`\n                );\n                return;\n              case 3:\n                this.addLine(\n                  `(${this.inputData[0]} console) > `,\n                  `Enter your nickName`,\n                  `com`\n                );\n                return;\n            }\n            return;\n          case \"sign\":\n            switch (this.inputData.length) {\n              case 1: // 아이디 안내문 출력\n                this.addLine(`(sign console) > `, `${this.signHelp[0]}`, `com`);\n                this.inputType = \"password\";\n                return;\n              case 2: // 비번 안내문\n                this.addLine(`(sign console) > `, `${this.signHelp[1]}`, `com`);\n                this.inputType = \"password\";\n                return;\n              case 3: // 비번 확인 안내문\n                this.addLine(`(sign console) > `, `${this.signHelp[1]}`, `com`);\n                this.inputType = \"text\";\n                this.inputData.pop();\n                return;\n              case 4: // nick 안내문\n                this.addLine(`(sign console) > `, `${this.signHelp[3]}`, `com`);\n                return;\n              case 5: // 동의 안내문\n                this.addLine(`(sign console) > `, `${this.signHelp[4]}`, `com`);\n                return;\n            }\n            return;\n          case \"find\":\n            switch (this.inputData.length) {\n              case 1:\n                this.addLine(`(find console) > `, `ID or PW ?`, `com`);\n                return;\n              case 2:\n                this.addLine(`(find console) > `, `Enter your Token`, `com`);\n                return;\n            }\n            return;\n        }\n      }\n    },\n    printPW(data) {\n      // 비밀번호 ***로 표시\n      var str = \"\";\n      for (let i = 0; i < data.length; i++) {\n        str += \"•\";\n      }\n      return str;\n    },\n    loginAccess() {\n      this.addLine(`(login console) > `, `Loading...`, \"com\");\n      let header = null;\n      let loginInfo = {\n        access: \"login\",\n        data: {\n          memId: this.inputData[1],\n          memPass: this.inputData[2],\n        },\n      };\n      header\n      loginInfo\n\n      // 자바 로그인 로직 작성 후 주석 해제\n      // this.axios\n      //   .post(\"http://localhost:8099/access/login\", header, {\n      //     params: {\n      //       memId: this.inputData[1],\n      //       memPass: this.inputData[2],\n      //     },\n      //   })\n      //   .then((data) => {\n      //     sessionStorage.setItem(\"token\", data.data);\n      //     if (data.data !== \"fail\") {\n      //       this.addLine(`(login console) > `, `success`, `com`);\n      //       this.login(loginInfo);\n      //     } else {\n      //       this.addLine(`(login console) > `, `Login access Fail`, `com`);\n      //       this.addLine(`(base console) > `, `Choose Menu`, `com`);\n      //     }\n      //   })\n      //   .catch(() => {\n      //     this.addLine(`(login console) > `, `Login access Fail`, `com`);\n      //     this.addLine(`(base console) > `, `Choose Menu`, `com`);\n      //   });\n      // this.baseMode();\n\n      this.$router.push(\"/projects\")\n\n    },\n\n    signAccess() {\n      this.addLine(`(sign console) > `, `Loading`, \"com\");\n\n      let signInfo = {\n        access: this.inputData[0],\n        data: {\n          memId: this.inputData[1],\n          memPass: this.inputData[2],\n          memNick: this.inputData[4],\n          memCelNum: this.inputData[6],\n        },\n      };\n\n\n      let header = null;\n\n      this.axios\n        .post(\"http://localhost:8099/access/sign\", header, {\n          params: {\n            memId: signInfo.data.memId,\n            memPass: signInfo.data.memPass,\n            memNick: signInfo.data.memNick,\n            memCelNum: signInfo.data.memCelNum,\n          },\n        })\n        .then((token) => {\n          this.printToken = true;\n          this.addLine(\n            `(sign console) > `,\n            `Your Token : ${token.data}`,\n            `com token`\n          );\n          this.tokenText = token.data;\n          this.sign(signInfo);\n        })\n        .catch((err) => {\n          console.error(err);\n          this.addLine(`(sign console) > `, `Sign access Fail`, `com`);\n          this.addLine(`(base console) > `, `Choose Menu`, `com`);\n        });\n      this.baseMode();\n    },\n\n    findUserInfo() {\n      let url, mode;\n      let header = null;\n      let params = { memToken: this.inputData[2] };\n\n      switch (this.inputData[1]) {\n        case \"id\":\n          url = \"findId\";\n          mode = \"id\";\n          break;\n        case \"pw\":\n          url = \"resetPw\";\n          mode = \"pw\";\n          break;\n      }\n\n      this.axios\n        .post(`http://localhost:8099/access/${url}`, header, { params })\n        .then((data) => {\n          switch (mode) {\n            case \"id\":\n              this.addLine(\n                `(find console) > `,\n                `Your ID : ${data.data} `,\n                \"com\"\n              );\n              break;\n            case \"pw\":\n              if (data.data == true) {\n                this.addLine(\n                  `(find console) > `,\n                  `A temporary password has been sent via SMS.`,\n                  \"com\"\n                );\n              } else {\n                this.addLine(\n                  `(find console) > `,\n                  `You entered an Invalid Token`,\n                  \"com\"\n                );\n              }\n              break;\n          }\n        })\n        .catch(() => {\n          this.addLine(\n            `(find console) > `,\n            `You entered an Invalid Token`,\n            \"com\"\n          );\n        });\n      this.baseMode();\n    },\n\n    addLine(mode, enter, classdata) {\n      // 한줄 추가\n      this.consoleText.push(`Kanboo bash`);\n      this.modeText.push(mode);\n      this.enterText.push(enter);\n      this.classData.push(classdata);\n      this.inputText = \"\";\n    },\n    copyToken() {\n      if (this.printToken) {\n          navigator.clipboard.writeText(this.tokenText)\n        }\n        this.printToken = false;\n    },\n    focus() {\n      document.getElementById(\"inputBox\").focus();\n      document.getElementById(\"inputBox\").scrollIntoView();\n    },\n    regex() {\n      let stringReg = /^[a-z0-9]{6,20}$/;\n      let phoneReg = /(?:\\d{3}|\\d{4})-\\d{4}$/;\n      let words = [\n        \"login\",\n        \"sign\",\n        \"find\",\n        \"clear\",\n        \"cd..\",\n        \"cd ..\",\n        \"cd home\",\n      ];\n\n      if (this.inputData.length > 0 && this.inputData[0] === \"sign\") {\n        switch (this.inputData.length) {\n          case 5:\n            stringReg = false;\n            break;\n          case 6:\n            this.signReg = !phoneReg.test(this.inputText);\n            break;\n          default:\n            this.signReg = !stringReg.test(this.inputText);\n            break;\n        }\n      }\n\n      let target = this.inputText.toLowerCase();\n\n      for (let word of words) {\n        if (word === target) {\n          this.inputType = \"text\";\n          this.reservedWord = true;\n          break;\n        } else {\n          this.reservedWord = false;\n          if (\n            (this.inputData.length === 2 || this.inputData.length === 3) &&\n            this.inputData[0] !== \"find\"\n          ) {\n            this.inputType = \"password\";\n          }\n        }\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n@font-face {\n  font-family: \"NeoDunggeunmo\";\n  src: url(\"https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_2001@1.3/NeoDunggeunmo.woff\")\n    format(\"woff\");\n  font-weight: normal;\n  font-style: normal;\n}\n\n* {\n  font-family: \"NeoDunggeunmo\";\n  font-size: 22px;\n}\n\n.terminal-container {\n  height: calc(100vh - 70px);\n}\n\n.console {\n  color: #00ab26;\n  height: 100%;\n  padding: 20px;\n}\n\ninput {\n  width: 33%;\n  outline: none;\n  border: none;\n  color: #fff;\n  background: #16161a;\n}\n\n.user-text {\n  color: #fff;\n}\n\n.console-text {\n  color: #00ab26;\n}\n\n.com {\n  color: #00ab26;\n}\n\n.text-color-red {\n  color: red;\n}\n.text-color-orange {\n  color: darkorange;\n}\n\n.icons {\n  margin-top: 5px;\n  width: 20px;\n  vertical-align: sub;\n  display: inline-block;\n}\n\n.copy {\n  cursor: pointer;\n}\n</style>"]}]}