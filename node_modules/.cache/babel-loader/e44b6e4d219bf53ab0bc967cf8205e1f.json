{"remainingRequest":"/Users/andaegeun/Desktop/kanboo_vue_merge/node_modules/babel-loader/lib/index.js!/Users/andaegeun/Desktop/kanboo_vue_merge/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/andaegeun/Desktop/kanboo_vue_merge/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/andaegeun/Desktop/kanboo_vue_merge/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/andaegeun/Desktop/kanboo_vue_merge/src/components/component/acess/projectDetail/gitAndIssue/Git.vue?vue&type=template&id=db85d398&scoped=true","dependencies":[{"path":"/Users/andaegeun/Desktop/kanboo_vue_merge/src/components/component/acess/projectDetail/gitAndIssue/Git.vue","mtime":1639119881345},{"path":"/Users/andaegeun/Desktop/kanboo_vue_merge/babel.config.js","mtime":1639096172894},{"path":"/Users/andaegeun/Desktop/kanboo_vue_merge/node_modules/cache-loader/dist/cjs.js","mtime":1639096175720},{"path":"/Users/andaegeun/Desktop/kanboo_vue_merge/node_modules/babel-loader/lib/index.js","mtime":1639096175607},{"path":"/Users/andaegeun/Desktop/kanboo_vue_merge/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1639096183165},{"path":"/Users/andaegeun/Desktop/kanboo_vue_merge/node_modules/cache-loader/dist/cjs.js","mtime":1639096175720},{"path":"/Users/andaegeun/Desktop/kanboo_vue_merge/node_modules/vue-loader-v16/dist/index.js","mtime":1639096183158}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIHJlc29sdmVDb21wb25lbnQgYXMgX3Jlc29sdmVDb21wb25lbnQsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jayBhcyBfY3JlYXRlRWxlbWVudEJsb2NrLCBwdXNoU2NvcGVJZCBhcyBfcHVzaFNjb3BlSWQsIHBvcFNjb3BlSWQgYXMgX3BvcFNjb3BlSWQgfSBmcm9tICJ2dWUiOwoKdmFyIF93aXRoU2NvcGVJZCA9IGZ1bmN0aW9uIF93aXRoU2NvcGVJZChuKSB7CiAgcmV0dXJuIF9wdXNoU2NvcGVJZCgiZGF0YS12LWRiODVkMzk4IiksIG4gPSBuKCksIF9wb3BTY29wZUlkKCksIG47Cn07Cgp2YXIgX2hvaXN0ZWRfMSA9IHsKICBjbGFzczogIlJlcG8iCn07Cgp2YXIgX2hvaXN0ZWRfMiA9IC8qI19fUFVSRV9fKi9fd2l0aFNjb3BlSWQoZnVuY3Rpb24gKCkgewogIHJldHVybiAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgiaDEiLCBudWxsLCAiUHJvamVjdCBSZXBvc2l0b3J5IiwgLTEKICAvKiBIT0lTVEVEICovCiAgKTsKfSk7Cgp2YXIgX2hvaXN0ZWRfMyA9IHsKICBjbGFzczogIm5vZGVUcmVlIgp9OwoKdmFyIF9ob2lzdGVkXzQgPSAvKiNfX1BVUkVfXyovX3dpdGhTY29wZUlkKGZ1bmN0aW9uICgpIHsKICByZXR1cm4gLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoImgxIiwgbnVsbCwgIkRvY3VtZW50IExpc3QiLCAtMQogIC8qIEhPSVNURUQgKi8KICApOwp9KTsKCnZhciBfaG9pc3RlZF81ID0gewogIGNsYXNzOiAicmVwb0NvbnRlbnQiCn07CmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlLCAkcHJvcHMsICRzZXR1cCwgJGRhdGEsICRvcHRpb25zKSB7CiAgdmFyIF9jb21wb25lbnRfVHJlZSA9IF9yZXNvbHZlQ29tcG9uZW50KCJUcmVlIik7CgogIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soImRpdiIsIF9ob2lzdGVkXzEsIFtfaG9pc3RlZF8yLCBfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF8zLCBbX2hvaXN0ZWRfNCwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfNSwgW19jcmVhdGVWTm9kZShfY29tcG9uZW50X1RyZWUsIHsKICAgICJzZWFyY2gtdGV4dCI6ICRkYXRhLnNlYXJjaFRleHQsCiAgICAidXNlLWljb24iOiB0cnVlLAogICAgb25Ob2RlRXhwYW5kZWQ6ICRvcHRpb25zLm9uVXBkYXRlLAogICAgbm9kZXM6ICRkYXRhLmRhdGEKICB9LCBudWxsLCA4CiAgLyogUFJPUFMgKi8KICAsIFsic2VhcmNoLXRleHQiLCAib25Ob2RlRXhwYW5kZWQiLCAibm9kZXMiXSldKV0pXSk7Cn0="},{"version":3,"sources":["/Users/andaegeun/Desktop/kanboo_vue_merge/src/components/component/acess/projectDetail/gitAndIssue/Git.vue"],"names":[],"mappings":";;;;;;;AACS,EAAA,KAAK,EAAC;;;;sBACP,mBAAA,CAA2B,IAA3B,EAA2B,IAA3B,EAAI,oBAAJ,EAAsB,CAAA;AAAA;AAAtB,G;;;;AACK,EAAA,KAAK,EAAC;;;;sBACP,mBAAA,CAAsB,IAAtB,EAAsB,IAAtB,EAAI,eAAJ,EAAiB,CAAA;AAAA;AAAjB,G;;;;AACK,EAAA,KAAK,EAAC;;;;;uBAJnB,mBAAA,CAaM,KAbN,EAAA,UAAA,EAaM,CAZF,UAYE,EAXF,mBAAA,CAUM,KAVN,EAAA,UAAA,EAUM,CATF,UASE,EARF,mBAAA,CAOM,KAPN,EAAA,UAAA,EAOM,CANF,YAAA,CAKE,eALF,EAKE;AAJD,mBAAa,KAAA,CAAA,UAIZ;AAHD,gBAAU,IAGT;AAFD,IAAA,cAAY,EAAE,QAAA,CAAA,QAEb;AADD,IAAA,KAAK,EAAE,KAAA,CAAA;AACN,GALF,E,IAAA,E;;AAAA,I,0CAAA,CAME,CAPN,CAQE,CAVN,CAWE,CAbN,C","sourcesContent":["<template>\n    <div class=\"Repo\">\n        <h1>Project Repository</h1>\n        <div class=\"nodeTree\">\n            <h1>Document List</h1>\n            <div class=\"repoContent\">\n                <Tree \n                :search-text=\"searchText\"\n                :use-icon=\"true\"\n                @nodeExpanded=\"onUpdate\"\n                :nodes=\"data\" \n                />\n            </div>\n        </div>\n    </div>\n</template>\n \n<script>\nimport { mapMutations } from 'vuex'\nimport { mapActions } from 'vuex'\nimport { ref } from 'vue';\nimport Tree from 'vue3-tree'\nimport \"vue3-tree/dist/style.css\";\n\nconst key = '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';\n\nexport default {\n    components : {\n        Tree,\n    },\n    data() {\n        return {\n            data : ref([]),\n            searchText : ref(''),\n            encodedData : '',\n        }\n    },\n    methods: {\n        ...mapMutations({\n            setDecodeData : 'git/setDecodeData',\n            setSelectedFileName : 'git/setSelectedFileName',\n        }),\n        ...mapActions({\n            getRepoList : 'git/getRepoList',\n        }),\n        \n        onUpdate(e) {\n            if(e.type === 'file'){\n                this.sendContent(e)\n                return\n            }\n            this.axios.get(`${e.url}`, {\n                    headers : {\n                        Authorization : `token ${key}`\n                    }\n            })\n            .then( res => {\n                for(let i of res.data){\n                    const a = {\n                        idx : i.sha,\n                        label : i.name,\n                        type : i.type,\n                        url : i.url,\n                        nodes : [],\n                        content : null,\n                    }\n                    if(i.type === 'file'){\n                        a.nodes = null\n                        a.content = i.content\n                    }\n\n                    e.nodes.push(a)\n                }\n            })\n        },\n\n        sendContent(e){\n                this.axios.get(`${e.url}`, {\n                        headers : {\n                            Authorization : `token ${key}`\n                        }\n                })\n                .then( res => {\n                    this.encodedData = res.data.content\n                    this.decodeData()\n                    this.setSelectedFileName(res.data.name)\n                })\n        },\n\n        getFileList() {\n            this.axios.get('https://api.github.com/repos/Juwon-Yun/kanboo_my_work/contents', {\n                    headers : {\n                        Authorization : `token ${key}`\n                    }\n                })\n            .then( res =>{\n                for(let i of res.data){\n\n                    // 403 error 방지 \n                    if(i.name === 'package-lock.json' ){\n                        continue\n                    }\n\n                    const array = {\n                        idx : i.sha,\n                        label : i.name,\n                        type : i.type,\n                        url : i.url,\n                        nodes : [],\n                        content : null,\n                    }\n                    if(i.type === 'file'){\n                        array.nodes = null\n                        array.content = i.content\n                    }\n                    this.data.push(array)\n                }// for i of\n            })\n        },\n\n        decodeData(){\n            this.setDecodeData( decodeURIComponent(escape(window.atob(this.encodedData)))) \n        },\n    },\n    \n    mounted() {\n        this.getFileList();\n    },\n}\n\n</script>\n \n<style scoped>\n.nodeTree{\n    height: 20vh;\n    background-color: #2C2F3B;\n    overflow: scroll;\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n}\n.nodeTree::-webkit-scrollbar {\n    display: none; \n}\n.nodeTree > h1{\n    padding-bottom: 5px;\n}\n.repoContent{\n    color: #eee;\n}\n\n.tree-row-item{\n    padding: 0;\n}\n.tree-list{\n    gap : 5px;\n}\n</style>"],"sourceRoot":""}]}