{"remainingRequest":"/Users/andaegeun/Desktop/kanboo_vue_merge/node_modules/babel-loader/lib/index.js!/Users/andaegeun/Desktop/kanboo_vue_merge/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/andaegeun/Desktop/kanboo_vue_merge/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/andaegeun/Desktop/kanboo_vue_merge/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/andaegeun/Desktop/kanboo_vue_merge/src/components/component/noAccess/home/Terminal.vue?vue&type=template&id=0bfc99b8&scoped=true","dependencies":[{"path":"/Users/andaegeun/Desktop/kanboo_vue_merge/src/components/component/noAccess/home/Terminal.vue","mtime":1639115078933},{"path":"/Users/andaegeun/Desktop/kanboo_vue_merge/babel.config.js","mtime":1639096172894},{"path":"/Users/andaegeun/Desktop/kanboo_vue_merge/node_modules/cache-loader/dist/cjs.js","mtime":1639096175720},{"path":"/Users/andaegeun/Desktop/kanboo_vue_merge/node_modules/babel-loader/lib/index.js","mtime":1639096175607},{"path":"/Users/andaegeun/Desktop/kanboo_vue_merge/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1639096183165},{"path":"/Users/andaegeun/Desktop/kanboo_vue_merge/node_modules/cache-loader/dist/cjs.js","mtime":1639096175720},{"path":"/Users/andaegeun/Desktop/kanboo_vue_merge/node_modules/vue-loader-v16/dist/index.js","mtime":1639096183158}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgcmVuZGVyTGlzdCBhcyBfcmVuZGVyTGlzdCwgRnJhZ21lbnQgYXMgX0ZyYWdtZW50LCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlRWxlbWVudEJsb2NrIGFzIF9jcmVhdGVFbGVtZW50QmxvY2ssIHRvRGlzcGxheVN0cmluZyBhcyBfdG9EaXNwbGF5U3RyaW5nLCBjcmVhdGVFbGVtZW50Vk5vZGUgYXMgX2NyZWF0ZUVsZW1lbnRWTm9kZSwgbm9ybWFsaXplQ2xhc3MgYXMgX25vcm1hbGl6ZUNsYXNzLCBjcmVhdGVDb21tZW50Vk5vZGUgYXMgX2NyZWF0ZUNvbW1lbnRWTm9kZSwgd2l0aEtleXMgYXMgX3dpdGhLZXlzLCB2TW9kZWxEeW5hbWljIGFzIF92TW9kZWxEeW5hbWljLCB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIGNyZWF0ZVRleHRWTm9kZSBhcyBfY3JlYXRlVGV4dFZOb2RlLCBwdXNoU2NvcGVJZCBhcyBfcHVzaFNjb3BlSWQsIHBvcFNjb3BlSWQgYXMgX3BvcFNjb3BlSWQgfSBmcm9tICJ2dWUiOwoKdmFyIF93aXRoU2NvcGVJZCA9IGZ1bmN0aW9uIF93aXRoU2NvcGVJZChuKSB7CiAgcmV0dXJuIF9wdXNoU2NvcGVJZCgiZGF0YS12LTBiZmM5OWI4IiksIG4gPSBuKCksIF9wb3BTY29wZUlkKCksIG47Cn07Cgp2YXIgX2hvaXN0ZWRfMSA9IHsKICBjbGFzczogImNvbnNvbGUiCn07CnZhciBfaG9pc3RlZF8yID0gewogIGNsYXNzOiAiY29uc29sZS10ZXh0Igp9Owp2YXIgX2hvaXN0ZWRfMyA9IHsKICBjbGFzczogImNvbnNvbGUtdGV4dCIKfTsKdmFyIF9ob2lzdGVkXzQgPSBbImlkIl07CnZhciBfaG9pc3RlZF81ID0gewogIGNsYXNzOiAidXNlcklucHV0Igp9Owp2YXIgX2hvaXN0ZWRfNiA9IHsKICBrZXk6IDAsCiAgc3R5bGU6IHsKICAgICJjb2xvciI6ICJ3aGl0ZSIKICB9Cn07CnZhciBfaG9pc3RlZF83ID0gWyJ0eXBlIl07CnZhciBfaG9pc3RlZF84ID0gewogIGtleTogMQp9OwpleHBvcnQgZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykgewogIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soImRpdiIsIHsKICAgIGNsYXNzOiAidGVybWluYWwtY29udGFpbmVyIiwKICAgIG9uQ2xpY2s6IF9jYWNoZVszXSB8fCAoX2NhY2hlWzNdID0gZnVuY3Rpb24gKCRldmVudCkgewogICAgICByZXR1cm4gJG9wdGlvbnMuZm9jdXMoKTsKICAgIH0pCiAgfSwgW19jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzEsIFsoX29wZW5CbG9jayh0cnVlKSwgX2NyZWF0ZUVsZW1lbnRCbG9jayhfRnJhZ21lbnQsIG51bGwsIF9yZW5kZXJMaXN0KCRkYXRhLmNvbnNvbGVUZXh0Lmxlbmd0aCwgZnVuY3Rpb24gKGksIGopIHsKICAgIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soImRpdiIsIHsKICAgICAgY2xhc3M6ICJvdXRwdXQtdGV4dCIsCiAgICAgIGtleTogagogICAgfSwgW19jcmVhdGVFbGVtZW50Vk5vZGUoInNwYW4iLCBfaG9pc3RlZF8yLCBfdG9EaXNwbGF5U3RyaW5nKCRkYXRhLmNvbnNvbGVUZXh0W2kgLSAxXSksIDEKICAgIC8qIFRFWFQgKi8KICAgICksIF9jcmVhdGVFbGVtZW50Vk5vZGUoInNwYW4iLCBfaG9pc3RlZF8zLCBfdG9EaXNwbGF5U3RyaW5nKCRkYXRhLm1vZGVUZXh0W2kgLSAxXSksIDEKICAgIC8qIFRFWFQgKi8KICAgICksIF9jcmVhdGVFbGVtZW50Vk5vZGUoInNwYW4iLCB7CiAgICAgIGNsYXNzOiBfbm9ybWFsaXplQ2xhc3MoWyRkYXRhLmNsYXNzRGF0YVtpIC0gMV0sICJ1c2VyLXRleHQiXSksCiAgICAgIGlkOiAidGV4dC0iLmNvbmNhdChpIC0gMSkKICAgIH0sIF90b0Rpc3BsYXlTdHJpbmcoJGRhdGEuZW50ZXJUZXh0W2kgLSAxXSksIDExCiAgICAvKiBURVhULCBDTEFTUywgUFJPUFMgKi8KICAgICwgX2hvaXN0ZWRfNCksICRkYXRhLnByaW50VG9rZW4gJiYgaiA9PT0gJGRhdGEudG9rZW5QcmludEluZGV4ID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jaygic3BhbiIsIHsKICAgICAga2V5OiAwLAogICAgICBjbGFzczogImNvcHkiLAogICAgICBvbkNsaWNrOiBfY2FjaGVbMF0gfHwgKF9jYWNoZVswXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gJG9wdGlvbnMuY29weVRva2VuICYmICRvcHRpb25zLmNvcHlUb2tlbi5hcHBseSgkb3B0aW9ucywgYXJndW1lbnRzKTsKICAgICAgfSkKICAgIH0sICIgW2NvcHldIikpIDogX2NyZWF0ZUNvbW1lbnRWTm9kZSgidi1pZiIsIHRydWUpXSk7CiAgfSksIDEyOAogIC8qIEtFWUVEX0ZSQUdNRU5UICovCiAgKSksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzUsIFtfY3JlYXRlVGV4dFZOb2RlKF90b0Rpc3BsYXlTdHJpbmcoJGRhdGEucm9vdFRleHQpICsgIiAiLCAxCiAgLyogVEVYVCAqLwogICksICRkYXRhLmlucHV0RGF0YS5sZW5ndGggPT0gNiA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soInNwYW4iLCBfaG9pc3RlZF82LCAiICs4MikgIikpIDogX2NyZWF0ZUNvbW1lbnRWTm9kZSgidi1pZiIsIHRydWUpLCBfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZUVsZW1lbnRWTm9kZSgiaW5wdXQiLCB7CiAgICB0eXBlOiAkZGF0YS5pbnB1dFR5cGUsCiAgICBvbktleXVwOiBfY2FjaGVbMV0gfHwgKF9jYWNoZVsxXSA9IF93aXRoS2V5cyhmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiAkb3B0aW9ucy5lbnRlciAmJiAkb3B0aW9ucy5lbnRlci5hcHBseSgkb3B0aW9ucywgYXJndW1lbnRzKTsKICAgIH0sIFsiZW50ZXIiXSkpLAogICAgaWQ6ICJpbnB1dEJveCIsCiAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6IF9jYWNoZVsyXSB8fCAoX2NhY2hlWzJdID0gZnVuY3Rpb24gKCRldmVudCkgewogICAgICByZXR1cm4gJGRhdGEuaW5wdXRUZXh0ID0gJGV2ZW50OwogICAgfSksCiAgICBjbGFzczogX25vcm1hbGl6ZUNsYXNzKHsKICAgICAgJ3RleHQtY29sb3ItcmVkJzogJGRhdGEuc2lnblJlZywKICAgICAgJ3RleHQtY29sb3Itb3JhbmdlJzogJGRhdGEucmVzZXJ2ZWRXb3JkCiAgICB9KQogIH0sIG51bGwsIDQyCiAgLyogQ0xBU1MsIFBST1BTLCBIWURSQVRFX0VWRU5UUyAqLwogICwgX2hvaXN0ZWRfNyksIFtbX3ZNb2RlbER5bmFtaWMsICRkYXRhLmlucHV0VGV4dF1dKSwgJGRhdGEuaWRDaGVjayA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soInNwYW4iLCBfaG9pc3RlZF84LCAiIElEIGFscmVhZHkgcmVnaXN0ZXJlZCAiKSkgOiBfY3JlYXRlQ29tbWVudFZOb2RlKCJ2LWlmIiwgdHJ1ZSldKV0pXSk7Cn0="},{"version":3,"sources":["/Users/andaegeun/Desktop/kanboo_vue_merge/src/components/component/noAccess/home/Terminal.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"terminal-container\" @click=\"focus()\">\n    <div class=\"console\">\n      <div class=\"output-text\" v-for=\"(i, j) in consoleText.length\" :key=\"j\">\n        <span class=\"console-text\">{{ consoleText[i - 1] }}</span>\n        <span class=\"console-text\">{{ modeText[i - 1] }}</span>\n        <span :class=\"classData[i - 1]\" :id=\"`text-${i - 1}`\" class=\"user-text\">\n          {{ enterText[i - 1] }}</span\n        >\n        <span class=\"copy\" v-if=\"printToken && j === tokenPrintIndex\" @click=\"copyToken\"> [copy]</span>\n      </div>\n      <div class=\"userInput\">\n        {{ rootText }}\n        <span style=\"color: white\" v-if=\"inputData.length == 6\"> +82) </span>\n        <input\n          :type=\"inputType\"\n          @keyup.enter=\"enter\"\n          id=\"inputBox\"\n          v-model=\"inputText\"\n          :class=\"{\n            'text-color-red': signReg,\n            'text-color-orange': reservedWord,\n          }\"\n        />\n        <span v-if=\"idCheck\"> ID already registered </span>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapMutations, mapState } from \"vuex\";\nimport signHelp from \"@/assets/signHelp.js\";\n\nexport default {\n  name: \"Terminal\",\n  computed: {\n    ...mapState({\n      loginInfo: (state) => state.sign.loginInfo,\n      signInfo: (state) => state.sign.signInfo,\n      findInfo: (state) => state.sign.signInfo,\n    }),\n  },\n  updated() {\n    // this.copyToken();\n\n    if(this.printToken){\n        this.tokenPrintIndex = this.consoleText.length -1 ; \n    }\n\n  },\n  mounted() {},\n  components: {},\n  data() {\n    return {\n      rootText: `Kanboo bash(base console) > `,\n      modeText: [`(base console) > `],\n      consoleText: [`Kanboo bash`],\n      enterText: [`Choose Menu 1.login 2.sign 3.find 4.clear 5.cd.. 6.cd home`],\n      classData: [`com`],\n      inputType: \"text\",\n      inputData: [],\n      inputText: \"\",\n      signHelp: signHelp.en,\n      idCheck: false,\n      signReg: false,\n      reservedWord: false,\n      printToken: false,\n      tokenText: \"\",\n      tokenPrintIndex: \"\",\n    };\n  },\n  watch: {\n    inputText: [\"regex\", \"isExistId\"],\n  },\n  methods: {\n    ...mapMutations({\n      login: \"sign/login\",\n      sign: \"sign/sign\",\n      find: \"sign/find\",\n    }),\n    isExistId() {\n      let header = null;\n\n      if (\n        this.inputData.length === 1 &&\n        this.inputText.length > 5 &&\n        this.inputData[0] === \"sign\"\n      ) {\n        this.axios\n          .post(`http://localhost:8099/access/idCheck`, header, {\n            params: {\n              memId: `${this.inputText}`,\n            },\n          })\n          .then((data) => {\n            if (data.data) {\n              this.idCheck = true;\n              this.signReg = true;\n            } else {\n              this.idCheck = false;\n              this.signReg = false;\n            }\n          });\n      }\n    },\n    enter() {\n      let data = this.inputText.toLowerCase();\n      let originalData = this.inputText;\n      if (data === \"clear\") {\n        this.consoleText = [`Kanboo bash`];\n        this.classData = [`com`];\n        switch (this.inputData[0]) {\n          case \"login\":\n            this.modeText = [`(${this.inputData[0]} console) > `];\n            if (this.inputData.length == 1) {\n              this.enterText = [`Enter your ID`];\n            } else if (this.inputData.length == 2) {\n              this.enterText = [`Enter your Password`];\n            }\n            this.addLine(`(${this.inputData[0]} console) > `, data, \"\");\n            return;\n          case \"sign\":\n            this.modeText = [`(${this.inputData[0]} console) > `];\n            this.enterText = [`${this.signHelp[this.inputData.length - 1]}`];\n            if (this.inputData.length == 5)\n              this.classData[0] = [`text-color-red`];\n            this.addLine(`(${this.inputData[0]} console) > `, data, \"\");\n            return;\n          case \"find\":\n            this.modeText = [`(${this.inputData[0]} console) > `];\n            this.enterText = [`Enter your Token`];\n            this.addLine(`(${this.inputData[0]} console) > `, data, \"\");\n            return;\n          default:\n            this.modeText = [`(base console) > `];\n            this.enterText = [\n              `Choose Menu 1.login 2.sign 3.find 4.clear 5.cd.. 6.cd home`,\n            ];\n            this.nothing(originalData);\n            return;\n        }\n      }\n\n      if (this.inputData.length > 0) {\n        switch (data) {\n          case \"cd..\":\n          case \"cd ..\":\n            this.goBack(originalData);\n            return;\n          case \"cd home\":\n            this.addLine(`(${this.inputData[0]} console) > `, data, \"\");\n            this.baseMode();\n            return;\n        }\n\n        switch (this.inputData[0]) {\n          case \"login\":\n            this.loginMode(originalData);\n            break;\n          case \"sign\":\n            this.signMode(originalData);\n            break;\n          case \"find\":\n            this.findMode(data, originalData);\n            break;\n        }\n      } else {\n        switch (data) {\n          case \"login\":\n            this.loginMode(data, originalData);\n            break;\n          case \"sign\":\n            this.signMode(data, originalData);\n            break;\n          case \"find\":\n            this.findMode(data, originalData);\n            break;\n          default:\n            this.nothing(originalData);\n            break;\n        }\n      }\n    },\n    baseMode() {\n      this.inputType = \"text\";\n      this.rootText = `Kanboo bash(base console) > `;\n      this.printToken = false;\n      this.signReg = false;\n      this.inputData.length = 0;\n    },\n\n    loginMode(data, originalData) {\n      if (this.inputText == \"\") return;\n\n      switch (this.inputData.length) {\n        case 0:\n          this.rootText = `Kanboo bash(login console) > `;\n          this.inputData.push(data);\n          this.addLine(`(base console) > `, originalData, \"\");\n          this.addLine(`(login console) > `, `Enter your ID`, `com`);\n          return;\n        case 1:\n          // 아이디 입력\n          this.form(data, \"ID\");\n          this.inputData.push(data);\n          this.addLine(`(login console) > `, `Enter your PW`, `com`);\n          this.inputType = \"password\";\n          return;\n        case 2:\n          // 비밀번호 입력\n          this.form(data, \"PW\");\n          this.inputData.push(data);\n          this.loginAccess();\n          return;\n      }\n    },\n\n    signMode(data, originalData) {\n      if (this.signReg) return;\n      switch (this.inputData.length) {\n        case 0: // 아이디 입력 안내문\n          this.rootText = `Kanboo bash(sign console) > `;\n          this.inputData.push(data);\n          this.addLine(`(base console) > `, originalData, \"\");\n          this.addLine(`(sign console) > `, `${this.signHelp[0]}`, `com`);\n          return;\n        case 1:\n          // 아이디 입력, 비밀번호 입력 안내문\n          this.form(data, \"ID\");\n          this.addLine(`(sign console) > `, `${this.signHelp[1]}`, `com`);\n          this.inputData.push(data);\n          this.inputType = \"password\";\n          return;\n        case 2:\n          // 비번 입력 , 비밀번호 체크 안내문\n          this.form(data, \"PW\");\n          this.addLine(`(sign console) > `, `${this.signHelp[2]}`, `com`);\n          this.inputData.push(data);\n          this.inputType = \"password\";\n          return;\n        case 3:\n          // 비번 확인 입력, 닉네임 입력 안내문\n          this.form(data, \"PWCheck\");\n          if (this.inputData[2] !== data) {\n            this.addLine(`(sign console) > `, `${this.signHelp[2]}`, `com`);\n            return;\n          }\n          this.addLine(`(sign console) > `, `${this.signHelp[3]}`, `com`);\n          this.inputData.push(data);\n          this.inputType = \"text\";\n          return;\n        case 4:\n          // 닉네임 입력, 동의 확인\n          this.form(data, \"nickName\");\n          this.inputData.push(data);\n          this.addLine(\n            `(sign console) > `,\n            `${this.signHelp[4]}`,\n            `text-color-red`\n          );\n          this.inputType = \"text\";\n          return;\n        case 5:\n          // 동의 확인 입력, 폰 입력 안내문\n          this.form(data, \"phoneChk\");\n          if (\"Y\" !== data && \"y\" !== data) {\n            this.addLine(\n              `(sign console) > `,\n              `${this.signHelp[4]}`,\n              `text-color-red`\n            );\n            return;\n          }\n          this.inputData.push(data);\n          this.addLine(`(sign console) > `, `${this.signHelp[5]}`, `com`);\n          return;\n        case 6:\n          // 저나번호 입력\n          this.form(data, \"phone\");\n          this.inputData.push(data);\n          this.signAccess();\n          break;\n      }\n    },\n    findMode(data, originalData) {\n      if (this.inputText == \"\") return;\n      switch (this.inputData.length) {\n        case 0:\n          this.rootText = `Kanboo bash(find console) > `;\n          this.addLine(`(base console) > `, originalData, \"\");\n          this.inputData.push(originalData);\n          this.addLine(`(find console) > `, `ID or PW ?`, `com`);\n          return;\n        case 1:\n          this.addLine(`(find console) > `, data, \"\");\n          this.inputData.push(data);\n          this.addLine(`(find console) > `, `Enter your Token`, `com`);\n          return;\n        case 2:\n          this.addLine(`(find console) > `, originalData, \"\");\n          this.inputData.push(data);\n          this.findUserInfo();\n      }\n      return;\n    },\n    form(data, position) {\n      switch (position) {\n        case \"PW\":\n        case \"PWCheck\":\n          this.addLine(\n            `(${this.inputData[0]} console) > `,\n            this.printPW(data),\n            \"\"\n          );\n          break;\n        case \"phone\":\n          data = `+82) ${data}`;\n\n          this.addLine(`(${this.inputData[0]} console) > `, data, \"\");\n          break;\n        default:\n          this.addLine(`(${this.inputData[0]} console) > `, data, \"\");\n          break;\n      }\n    },\n    nothing(data) {\n      // 키워드 아닐때 그냥 추가\n      this.addLine(`(base console) > `, data, \"\");\n    },\n    goBack(data) {\n      // 뒤로 가기\n      this.addLine(`(${this.inputData[0]} console) > `, data, \"\");\n      this.inputData.pop();\n      if (this.inputData.length === 0) {\n        return this.baseMode();\n      } else {\n        switch (this.inputData[0]) {\n          case \"login\":\n            switch (this.inputData.length) {\n              case 1:\n                this.addLine(\n                  `(${this.inputData[0]} console) > `,\n                  `Enter your ID`,\n                  `com`\n                );\n                return;\n              case 2:\n                this.addLine(\n                  `(${this.inputData[0]} console) > `,\n                  `Enter your PW`,\n                  `com`\n                );\n                return;\n              case 3:\n                this.addLine(\n                  `(${this.inputData[0]} console) > `,\n                  `Enter your nickName`,\n                  `com`\n                );\n                return;\n            }\n            return;\n          case \"sign\":\n            switch (this.inputData.length) {\n              case 1: // 아이디 안내문 출력\n                this.addLine(`(sign console) > `, `${this.signHelp[0]}`, `com`);\n                this.inputType = \"password\";\n                return;\n              case 2: // 비번 안내문\n                this.addLine(`(sign console) > `, `${this.signHelp[1]}`, `com`);\n                this.inputType = \"password\";\n                return;\n              case 3: // 비번 확인 안내문\n                this.addLine(`(sign console) > `, `${this.signHelp[1]}`, `com`);\n                this.inputType = \"text\";\n                this.inputData.pop();\n                return;\n              case 4: // nick 안내문\n                this.addLine(`(sign console) > `, `${this.signHelp[3]}`, `com`);\n                return;\n              case 5: // 동의 안내문\n                this.addLine(`(sign console) > `, `${this.signHelp[4]}`, `com`);\n                return;\n            }\n            return;\n          case \"find\":\n            switch (this.inputData.length) {\n              case 1:\n                this.addLine(`(find console) > `, `ID or PW ?`, `com`);\n                return;\n              case 2:\n                this.addLine(`(find console) > `, `Enter your Token`, `com`);\n                return;\n            }\n            return;\n        }\n      }\n    },\n    printPW(data) {\n      // 비밀번호 ***로 표시\n      var str = \"\";\n      for (let i = 0; i < data.length; i++) {\n        str += \"•\";\n      }\n      return str;\n    },\n    loginAccess() {\n      this.addLine(`(login console) > `, `Loading...`, \"com\");\n      let header = null;\n      let loginInfo = {\n        access: \"login\",\n        data: {\n          memId: this.inputData[1],\n          memPass: this.inputData[2],\n        },\n      };\n      header\n      loginInfo\n\n      // 자바 로그인 로직 작성 후 주석 해제\n      // this.axios\n      //   .post(\"http://localhost:8099/access/login\", header, {\n      //     params: {\n      //       memId: this.inputData[1],\n      //       memPass: this.inputData[2],\n      //     },\n      //   })\n      //   .then((data) => {\n      //     sessionStorage.setItem(\"token\", data.data);\n      //     if (data.data !== \"fail\") {\n      //       this.addLine(`(login console) > `, `success`, `com`);\n      //       this.login(loginInfo);\n      //     } else {\n      //       this.addLine(`(login console) > `, `Login access Fail`, `com`);\n      //       this.addLine(`(base console) > `, `Choose Menu`, `com`);\n      //     }\n      //   })\n      //   .catch(() => {\n      //     this.addLine(`(login console) > `, `Login access Fail`, `com`);\n      //     this.addLine(`(base console) > `, `Choose Menu`, `com`);\n      //   });\n      // this.baseMode();\n\n      this.$router.push(\"/projects\")\n\n    },\n\n    signAccess() {\n      this.addLine(`(sign console) > `, `Loading`, \"com\");\n\n      let signInfo = {\n        access: this.inputData[0],\n        data: {\n          memId: this.inputData[1],\n          memPass: this.inputData[2],\n          memNick: this.inputData[4],\n          memCelNum: this.inputData[6],\n        },\n      };\n\n\n      let header = null;\n\n      this.axios\n        .post(\"http://localhost:8099/access/sign\", header, {\n          params: {\n            memId: signInfo.data.memId,\n            memPass: signInfo.data.memPass,\n            memNick: signInfo.data.memNick,\n            memCelNum: signInfo.data.memCelNum,\n          },\n        })\n        .then((token) => {\n          this.printToken = true;\n          this.addLine(\n            `(sign console) > `,\n            `Your Token : ${token.data}`,\n            `com token`\n          );\n          this.tokenText = token.data;\n          this.sign(signInfo);\n        })\n        .catch((err) => {\n          console.error(err);\n          this.addLine(`(sign console) > `, `Sign access Fail`, `com`);\n          this.addLine(`(base console) > `, `Choose Menu`, `com`);\n        });\n      this.baseMode();\n    },\n\n    findUserInfo() {\n      let url, mode;\n      let header = null;\n      let params = { memToken: this.inputData[2] };\n\n      switch (this.inputData[1]) {\n        case \"id\":\n          url = \"findId\";\n          mode = \"id\";\n          break;\n        case \"pw\":\n          url = \"resetPw\";\n          mode = \"pw\";\n          break;\n      }\n\n      this.axios\n        .post(`http://localhost:8099/access/${url}`, header, { params })\n        .then((data) => {\n          switch (mode) {\n            case \"id\":\n              this.addLine(\n                `(find console) > `,\n                `Your ID : ${data.data} `,\n                \"com\"\n              );\n              break;\n            case \"pw\":\n              if (data.data == true) {\n                this.addLine(\n                  `(find console) > `,\n                  `A temporary password has been sent via SMS.`,\n                  \"com\"\n                );\n              } else {\n                this.addLine(\n                  `(find console) > `,\n                  `You entered an Invalid Token`,\n                  \"com\"\n                );\n              }\n              break;\n          }\n        })\n        .catch(() => {\n          this.addLine(\n            `(find console) > `,\n            `You entered an Invalid Token`,\n            \"com\"\n          );\n        });\n      this.baseMode();\n    },\n\n    addLine(mode, enter, classdata) {\n      // 한줄 추가\n      this.consoleText.push(`Kanboo bash`);\n      this.modeText.push(mode);\n      this.enterText.push(enter);\n      this.classData.push(classdata);\n      this.inputText = \"\";\n    },\n    copyToken() {\n      if (this.printToken) {\n          navigator.clipboard.writeText(this.tokenText)\n        }\n        this.printToken = false;\n    },\n    focus() {\n      document.getElementById(\"inputBox\").focus();\n      document.getElementById(\"inputBox\").scrollIntoView();\n    },\n    regex() {\n      let stringReg = /^[a-z0-9]{6,20}$/;\n      let phoneReg = /(?:\\d{3}|\\d{4})-\\d{4}$/;\n      let words = [\n        \"login\",\n        \"sign\",\n        \"find\",\n        \"clear\",\n        \"cd..\",\n        \"cd ..\",\n        \"cd home\",\n      ];\n\n      if (this.inputData.length > 0 && this.inputData[0] === \"sign\") {\n        switch (this.inputData.length) {\n          case 5:\n            stringReg = false;\n            break;\n          case 6:\n            this.signReg = !phoneReg.test(this.inputText);\n            break;\n          default:\n            this.signReg = !stringReg.test(this.inputText);\n            break;\n        }\n      }\n\n      let target = this.inputText.toLowerCase();\n\n      for (let word of words) {\n        if (word === target) {\n          this.inputType = \"text\";\n          this.reservedWord = true;\n          break;\n        } else {\n          this.reservedWord = false;\n          if (\n            (this.inputData.length === 2 || this.inputData.length === 3) &&\n            this.inputData[0] !== \"find\"\n          ) {\n            this.inputType = \"password\";\n          }\n        }\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n@font-face {\n  font-family: \"NeoDunggeunmo\";\n  src: url(\"https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_2001@1.3/NeoDunggeunmo.woff\")\n    format(\"woff\");\n  font-weight: normal;\n  font-style: normal;\n}\n\n* {\n  font-family: \"NeoDunggeunmo\";\n  font-size: 22px;\n}\n\n.terminal-container {\n  height: calc(100vh - 70px);\n}\n\n.console {\n  color: #00ab26;\n  height: 100%;\n  padding: 20px;\n}\n\ninput {\n  width: 33%;\n  outline: none;\n  border: none;\n  color: #fff;\n  background: #16161a;\n}\n\n.user-text {\n  color: #fff;\n}\n\n.console-text {\n  color: #00ab26;\n}\n\n.com {\n  color: #00ab26;\n}\n\n.text-color-red {\n  color: red;\n}\n.text-color-orange {\n  color: darkorange;\n}\n\n.icons {\n  margin-top: 5px;\n  width: 20px;\n  vertical-align: sub;\n  display: inline-block;\n}\n\n.copy {\n  cursor: pointer;\n}\n</style>"],"sourceRoot":""}]}